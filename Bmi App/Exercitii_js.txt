1. Scrieti o functie care sorteaza crescator un vector(array) de numere. Exemplu: a=[7,6,5] -> [5,6,7]
NOT DONE YET
1a. (Optional) Scrieti o functie care sorteaza un vector (array) de obiecte de tip persoana dupa numele mic. 
Exemplu: [{firstName: 'Ion', lastName: 'Ionescu'}, {firstName: 'Alin', lastName: 'Popescu'}] ->
[, {firstName: 'Alin', lastName: 'Popescu'}, {firstName: 'Ion', lastName: 'Ionescu'}]
NOT DONE YET
2. Scrieti o functie care intercaleaza 2 vectori de numere si elimina duplicatele. Exemplu a=[5,9,7], b=[11,9,1,3] -> [1,3,5,7,9,11]
NOT DONE YET

//3. Scrieti o functie care intoarce intersectia a doi vectori. Exemplu a=[5,9,7], b=[11,9,1,5] -> [5,9]
//Solution:
const a = [5,9,7];
const b = [11,9,1,5];
const arrayIntersect = [];

function Intersect(a, b) {
    for (let i = 0; i<a.length; i++) {
      for (let j = 0; j<b.length; j++) {
        if(a[i] == b[j]) {
        arrayIntersect.push(a[i]);
        }
      }
    }
    return arrayIntersect;
}
console.log(Intersect(a, b));


//4. Scrieti o functie care scoate toate valorile falsy dintr-un array. Exemple:
// - [7, "ate", "", false, 9] => [7, "ate", 9].
// - [false, null, 0, NaN, undefined, ""] -> [].
// - [1, null, NaN, 2, undefined] -> [1, 2].
//Solution:
const falsyArray = [7, "ate", "", false, 9];
let removeFalsyValues = [];

function removeFalsy(falsyArray) {
  for (let i = 0; i<falsyArray.length; i++) {
      if(falsyArray[i] != false && falsyArray[i] != null && !Number.isNaN(falsyArray[i])) {
        removeFalsyValues.push(falsyArray[i]);
      }
  }
  return removeFalsyValues;
}
console.log(removeFalsy(falsyArray));
 
 
5. Scrieti o functie care scoate duplicatele dintr-un vector. Exemplu: [1, 1, 2, 4, 2, 6, 2, 4] -> [1, 2, 4, 6]
NOT DONE YET

//6. Scrieti o functie care calculeaza suma numerelor dintr-un array. Bonus pentru cine foloseste array.reduce
//Solution:
const numbersArray = [1, 1, 2, 4, 2, 6, 2, 4];
let   numbersArraySum = 0;
// The old way
function calculateArraySum(numbersArray) {
    for(let i = 0; i<numbersArray.length; i++) {
      numbersArraySum+=numbersArray[i];
    }
    return numbersArraySum;
}

console.log(calculateArraySum(numbersArray));

// Bonus --> using reduce method
numbersArraySum = numbersArray.reduce((total, arrayValues) => total + arrayValues);
console.log(numbersArraySum);


//7. Scrieti o functie care returneaza dintr-n array valorile mai mari decat un anumit numar. Bonus pentru cine foloseste array.every
//Solution:
const simpleArray = [1,5,10,100,150,200];

let bigValuesArray = [];
// The old way
function getBigValues(simpleArray) {
    for (let i = 0; i<simpleArray.length; i++) {
      if(simpleArray[i] > 100) {
        bigValuesArray.push(simpleArray[i]);
      }
    }
    return bigValuesArray;
}
console.log(getBigValues(simpleArray));

// Bonus --> using array.every method
if(simpleArray.every(number => number > 0)) {
   bigValuesArray = simpleArray.filter(number => number > 100);
}
console.log(bigValuesArray);


//8. Scrieti o functie care returneaza valorile impare dintr-un array. Exemplu [3,3,2,7,9,5,5] -> [3,3,7,9,5,5]
//Solution:
const sampleArray = [3,3,2,7,9,5,5];
const oddArray = [];

function getOddValues(sampleArray) {
   for(let i = 0; i<sampleArray.length; i++) {
     if(sampleArray[i] % 2 !== 0) {
        oddArray.push(sampleArray[i]);
     }
   }
   return oddArray;
}
console.log(getOddValues(sampleArray));

//9. Scrieti o functie care gaseste toate pozitiile unei valori intr-un array. Exemplu array= [4,5,4,9,4,6,7], valoare = 4 -> [0,2,4]
//Solution:
const exampleArray = [4,5,4,9,4,6,7];
const posArray = [];

function getValuePos(value, exampleArray) {
   for(let i = 0; i<exampleArray.length; i++) {
     if(exampleArray[i] == value) {
        posArray.push(i);
     }
   }
   return posArray;
}
console.log(getValuePos(4, exampleArray));

//10. Scrieti o functie care converteste un obiect la un array dupa exemplul urmator: {firstName: 'Dan', age: 23, hasChildren: true} -> [['firstName', 'Dan'], ['age', 23], ['hasChildren', true]]
//Solution:
const exampleObject = {firstName: 'Dan', age: 23, hasChildren: true};

function convertToArray(exampleObject) {
   
   return Object.entries(exampleObject);
}
console.log(convertToArray(exampleObject));